/* Root se le conoce como pseudo elementos; es decir los elementos que no existen en el código HTML. Al siguiente bloque 
:root se le conoce como la variables de CSS. Estos son nuestro custom properties. */
:root {
    /* Root es una forma de almacenar variables de CSS que se les conoce como custom properties. */
    --blanco: #ffffff;
    /* Se crea una paleta de colores y se finaliza con dos puntos y posteriormente el color. */
    --oscuro: #212121;
    --primario: #784D3C;
    --gris: #e1e1e1;
    --secundario: #0097a7;
    --gris: #757575;
    /* Esta fuentes ya están registradas en el custom properties. */
    --fuenteHeading: 'PT Sans' sans-serif;
    --fuenteParrafos: 'Open Sans' sans-serif;

    --grisclaro: #dfe9f3;
}

/* Ahora vamos a crear los estilos de todo el html. Es de anotar que estos estilos deben de ir en casi todos los
proyectos. */
html {
    /* Con este border sizing hacemos que el border, el padding, etc. No afecte el ancho de nuestros elementos. */
    box-sizing: border-box;
    /* Esta siguiente línea no necesita de mayor presentación pués es el tamaño de la fuente. Un rem es = a 10px. */
    font-size: 62.5%;
}

/* Ahora vamos a agregar un before y un after.*/
*,
*:before,
*:after {
    /* Este inherit lo que hace heredar del elemento padre que vendría a ser el html anterior; pero tiene la 
    ventaja de que sí se utiliza en otro selector pués va a heredar de ese otro selector su atributos. */
    box-sizing: inherit;
}

/* Seguidamente vamos a crearle los estilos de forma global al body. */
body {
    font-family: var(--fuenteParrafos);
    font-size: 1.6rem;
    /* Esto es el interlineado de los párrafos. */
    line-height: 2;
}

/* Otros globales con BEM. */
.contenedor {
    /* Con estas líneas se van a ver un poco más grandes el contenido.
    max-width: 120rem;
    width: 90%; */
    /* Con este width esencialmente, lo que hace es aplicar el valor minimo de estos valores 90% a 120rem; permitiendo 
    que sí se encuentra en cualquier dispositivo, probablemente el 90% de la pantalla se expandirá; entonces que sería 
    menor, el 90& o los 120rem. A su vez permite reemplazar las dos líneas anteriores. Por lo tanto nos ahorramos dos 
    líneas de código. */
    width: min(90% 120rem);
    /* Con este margin auto se puede centrar el contenido horizontalmente en la pantalla, porque no vamos a tener un 
    display flex para centrarse. */
    margin: 0 auto;
}

/* Estilos para los enlaces. */
a {
    /* Con este text decoration le vamos a quitar el interlineado; entonces lo deja overline.*/
    text-decoration: none;
}

/* Seguidamente se presenta el sistema del heading. Todos van a tener la misma fuente con el mismo interlineado. */
h1,
h2,
h3,
h4 {
    font-family: var(--fuenteHeading);
    line-height: 1;
}

/* Y por supuesto van a tener el tamaño de la fuente diferente cada heading. */
h1 {
    font-size: 4.8rem;
}

h2 {
    font-size: 4rem;
}

h3 {
    font-size: 3.2rem;
}

h4 {
    font-size: 2.8rem;
}

/* Las imagenes. */
img {
    max-width: 100%;
}

/* Posteriormente vamos a tener algunas utilidades. */
.no-margin {
    /* Con esta línea se va a eliminar el margen. */
    margin: 0;
}

.no-padding {
    /* Con esta línea se va a eliminar el padding. */
    padding: 0;
}

.centrar-texto {
    text-align: center;
}

/* Aquí seleccionamos la clase header. 
.webp .header {
    background-image: url(../img/banner.jpg);
}*/
/*
.no-webp .header {
   Se trae la ruta de la imagen. 
    background-image: url(../img/banner.jpg);
}*/

.header {
    /* Se trae la ruta de la imagen. */
    background-image: url(../img/banner.jpg);
    /* Ahora le vamos a definir una altura. */
    height: 60rem;
    /* Con esta línea background-size toma, el cover y le permite tomar todo el espacio disponible. */
    background-size: cover;
    background-repeat: no-repeat;
    /* Con esta linea hacemos una posición para que se vea bien en cualquier dispositivo. y vamos a utilizar dos veces
    el center porque básicamente una imagen debe centrarse tanto verticalmente como horizontalmente. Dependiendo del
    anterior cover. */
    background-position: center center;
}

/* Vamos a centrar el título del header con su respectivo color blanco para este proyecto y su margin top. */
.header__text {
    text-align: center;
    color: var(--blanco);
    margin-top: 5rem;
}

/* Para centrar el texto. */
@media (min-width: 768px) {
    .header__text {
        margin: 15rem;
    }
}

/* Aquí vamos a crear los estilos de la barra de navegación con un flex box, que para este caso es una buena opción. */
@media (min-width: 768px) {
    .barra {
        /* Con esta línea nos selecciona los elementos uno al frente del otro. */
        display: flex;
        /* Con este justify content nos permite alinear contenido horizontalmente. Y sí se quiere un elemento uno al 
        lado derecho y el otro al lado izquierdo se coloca space-between.*/
        justify-content: space-between;
        /* Ahora alineamos verticalmente y centrado */
        align-items: center;
    }
}

/* Aquí separamos un poco más la barra de navegación en la parte de arriba. */
.barra {
    padding-top: 4rem-;
}

/* Ahora le vamos a dar estilos al logo. */
.logo {
    color: var(--blanco);
}

/* Este es el ancho del primer nombre del logo (Blog). */
.logo__nombre {
    font-weight: 400;
}

/* Este es el ancho del segundo nombre del logo (DeCafé) y este es un poco más ancho. */
.logo__bold {
    font-weight: 700;
}

/* Para que los enlaces se vean uno frente al otro y con su respectiva espaciado entre los enlaces. */
@media (min-width: 768px) {
    .navegacion {
        display: flex;
        gap: 2rem;
    }
}

/* Aquí nos encontramos con la navegación de los enlaces. */
.navegacion__enlace {
    /* Con esta línea los elementos no van a estar uno junto al otro sino uno debajo del otro. */
    display: block;
    /* Con esta línea se van a centrar los elementos horizontalmente. */
    text-align: center;
    /* Con esta línea se le da el ancho a las letras. */
    font-size: 1.8rem;
    color: var(--blanco);
}

/* Estos son los estilos de nuestro blog y estos se encuentran dentro de un mq. */
@media (min-width: 768px) {
    .contenido-principal {
        /* Esta línea nos sirve para posicionar los elementos. */
        display: grid;
        /* Ahora vamos a definir nuestro diseño con grid template columns de 2fr y 1fr porque el ancho se divide en tres
        partes; es decir 2fr es las dos terceras partes y uno 1fr es una tercera parte. */
        grid-template-columns: 2fr 1fr;
        column-gap: 4rem;
    }
}

/* Aquí vamos a darle los estilos a la entrada de los articles. */
.entrada {
    /* Para que se vea una línea punteada. */
    border-bottom: 1px solid var(--gris);
    /* Para que se pueda ver. */
    margin-bottom: 2rem;
}

/* Aquí vamos a quitarle los estilos a la linea de la última entrada de los articles con un selector; en este caso
se utilizó el last-of-type. */
.entrada:last-of-type {
    /* Para quitarle la linea punteada. */
    border: none;
    /* Para que no se pueda ver la margen. */
    margin-bottom: 0;
}

/* Aquí vamos a crearle los estilos al boton entrada para que tome todo el espacio disponible, recordemos que este
caso tiene un modificador. */
.boton {
    display: block;
    font-family: var(--fuenteHeading);
    color: var(--blanco);
    text-align: center;
    padding: 1rem 3rem;
    font-size: 1.8rem;
    text-transform: uppercase;
    font-weight: 700;
    margin-bottom: 2rem;
    border: none;
}

/* Aquí vamos a ingresar mq para poder alinearlo a la izquierda. */
@media (min-width: 768px) {
    .boton {
        /* Para que se separe de la linea punteada. */
        display: inline-block;
    }
}

.boton:hover {
    cursor: pointer;
}

/* Este es el modificador para el botón primario con esos dos guiones a la mitad nos refiere que se está heredando de
otra clase pero en algo va a cambiar. */
.boton--primario {
    background-color: var(--oscuro);
}

/* Este es el modificador para el botón secundario con esos dos guiones a la mitad nos refiere que se está heredando de
otra clase pero en algo va a cambiar. */
.boton--secundario {
    background-color: var(--primario);
}

/* Para quitarle las viñetas a las listas. */
.cursos {
    list-style: none;
}

/* El siguiente bloque de estilos es para los widget. */
.widget-curso {
    /* Aquí vamos a poner una línea punteada como al final del borde del botón. */
    border-bottom: 1px solid var(--gris);
    margin-bottom: 2rem;
}

/* Con este bloque evitamos que se repita la línea punteada al final de cada curso. */
.widget-curso:last-of-type {
    /* Aquí vamos a quitar una línea punteada como al final del borde del botón puede. */
    border: none;
    /* Aquí vamos a quitar una línea punteada como al final del borde del botón puede ser con none o con cero (0). */
    margin-bottom: none;
}

.widget-curso__label,
.curso__label {
    /* Con estas línea le cambiamos la fuente y en negrilla.*/
    font-family: var(--fuenteHeading);
    font-weight: bold;
}

.widget-curso__info {
    /* Aquí le cambiamos la fuente pero al span. */
    font-weight: normal;
}

/* Aquí colocamos dos selectores para que tenga una mejor apariencia. */
.widget-curso__label,
.widget-curso__info {
    font-size: 2rem;
}

/* Aquí nos encontramos con el footer. */
.footer {
    background-color: var(--oscuro);
    padding-bottom: 3rem 0;
    margin-top: 4rem;
}

/* Sobre nosotros; pero en este caso lo vamos a hacer un ejemplo con flex-box y con GRID; pero es a discreción de cada 
usuario. para este caso, vamos a utilizar nuestra mq.
@media (min-width: 768px) {
    .sobre-nosotros {
        display: flex;
        justify-content: space-between;
    }

    /* Esta factor de crecimiento depende del facto que tenga la imagen.
    .sobre-nosotros__texto {
        flex: 0 0 calc(50% - 1rem);
    }

    /* Desde aqui existe el valor de crecimiento. O sea que por cada un pixel el elemento, el factor del texto debe tener
    dos.
    .sobre-nosotros__imagen {
        flex: 0 0 calc(50% - 1rem);

    }

}*/

/*El anterior bloque sobre nosotros, se puede hacer tambien con el siguiente bloque. pero con GRID. */
@media (min-width: 768px) {
    .sobre-nosotros {
        display: grid;
        /*Aquí le decimos que queremos dos columnas del 50%*/
        grid-template-columns: repeat(2, 1fr);
        /* Y esta es la separación de las dos columnas. */
        column-gap: 2rem;
    }
}

/* Aqui siguen los estilos de los cursos. */
.curso {
    padding: 3rem;
    /* Este border bottom es para colocar la línea punteada. */
    border-bottom: 1px solid var(--gris);
}

@media (min-width: 768px) {
    .curso {
        display: grid;
        grid-template-columns: 1fr 2fr;
        column-gap: 2rem;
    }
}

.curso:last-of-type {
    border: none;
}

/* */

.curso__label {
    /* Con estas línea le cambiamos la fuente y en negrilla.*/
    font-family: var(--fuenteHeading);
    font-weight: bold;
}

.curso__info {
    /* Aquí le cambiamos la fuente pero al span. */
    font-weight: normal;
}

/* Aquí colocamos dos selectores para que tenga una mejor apariencia. */
.curso__label,
.curso__info {
    font-size: 2rem;
}

/* Aquí vamos a crear los estilos de los contactos. */
.error {
    background-color: red;
    text-align: center;
    padding: 1rem;
    color: var(--blanco);
    text-transform: uppercase;
}

.correcto {
    background-color: greenyellow;
    text-align: center;
    padding: 1rem;
    color: var(--blanco);
    text-transform: uppercase;
}

.contactos-bg {
    background-image: url(../img/contacto.jpg);
    height: 40rem;
    background-size: cover;
    background-repeat: no-repeat;
}

/* Aquí vamos a crear los estilos para el formulario. */
.formulario {
    background-color: var(--blanco);
    /* Para que se sitúe hacia arriba del logo. */
    margin: -5rem auto 0 auto;
    width: 95%;
    padding: 5rem;
}

.campo {
    display: flex;
    /* Para la separación de los label. */
    margin-bottom: 2rem;
}

.campo__label {
    flex: 0 0 9rem;
    text-align: right;
    padding-right: 2rem;
}

.campo__field {
    flex: 1;
    border: 1px solid var(--gris);
}

.campo__field--textarea {
    height: 20rem;
}